analyze_vb6: |
  Analyze the following VB6 parsed data: {parsed_data}
  Schema: {schema}
  Dependencies: {dep_graph}
  Generate a JSON summary with file purpose, functionality, dependencies, .NET mappings, controls, events, ADO queries.
  Output only valid JSON without any additional text, code blocks, or explanations. Start directly with '{{{{' and end with '}}}}'.
  Follow this exact structure:
  {{{{
    "files": [
      {{{{
        "file": "example.frm",
        "purpose": "Example purpose description",
        "functionality": "Example functionality description",
        "dependencies": ["dep1.bas", "dep2.cls"],
        "netMappings": {{{{"VB.Form": "Razor View", "VB.TextBox": "Input field"}}}},
        "controls": ["TextBox", "Button"],
        "events": ["Button_Click", "Form_Load"],
        "adoQueries": ["SELECT * FROM example_table"]
      }}}}
    ]
  }}}}


infer_schema: |
  Infer MySQL schema from ADO queries: {ado_queries}
  Output only valid JSON without any additional text, code blocks, or explanations. Start directly with '{{{{' and end with '}}}}'.
  Follow this exact structure:
  {{{{
    "tables": [
      {{{{
        "name": "example_table",
        "columns": [
          {{{{"name": "id", "type": "INT"}}}},
          {{{{"name": "name", "type": "VARCHAR(255)"}}}}
        ]
      }}}}
    ]
  }}}}

analyze_vb6_single_file: |
  You are a VB6 to .NET expert. Analyze the following single VB6 file and its context.
  Your output must be a single, valid JSON object, without any surrounding text or code fences.

  Database Schema (for context):
  {schema}

  File Data to Analyze:
  {file_data}

  Based on the file data (especially its source code content), determine its purpose, functionality, and how its components would map to .NET.

  Follow this exact JSON structure for your response:
  {{{{
    "file": "example.frm",
    "purpose": "A concise description of what this form is for.",
    "functionality": "A summary of what the code in this file does.",
    "dependencies": ["dep1.bas", "dep2.cls"],
    "netMappings": {{{{
      "VB.Form": "Razor View", 
      "VB.TextBox": "Input field"
    }}}},
    "controls": ["TextBox", "Button"],
    "events": ["Button_Click", "Form_Load"],
    "adoQueries": ["SELECT * FROM example_table"]
  }}}}

generate_file: |
  You are an expert .NET 9 and C# developer. Your task is to generate the complete code for a single file based on the provided context.

  Instructions:

  Generate only the raw code for the file specified.
  Do NOT include any surrounding text, explanations, or markdown code fences (like csharp ...).

  Pay close attention to the target_file_info to determine the correct namespace, class name, and file type (Controller, Model, View, etc.).

  Use the retrieved_rag_context to understand the original VB6 functionality and purpose, and translate that logic into modern .NET 9 code.

  For Models, create properties that match the database schema found in the context.

  For Controllers, create action methods (e.g., Index, Create, Edit) that correspond to the events and functionality of the original VB6 forms.

  For Views (.cshtml), create Razor syntax with HTML and Bootstrap 5 classes that replicates the UI controls from the original VB6 form.

  Context for Code Generation:
  {context}

refine_code: |
  You are an expert .NET 9 code debugger. You will be given a set of C# and Razor files that failed to build, along with the exact error messages from the compiler.
  Your task is to analyze the errors and the provided code, identify the root causes, and provide the corrected versions of ONLY the files that need to be changed.

  Instructions:

  Analyze the build_errors list carefully. Common errors include missing using statements, incorrect namespaces, type mismatches, or syntax errors.

  Review the files_with_code to find the lines causing the errors.

  Your output MUST be a single, valid JSON object.

  The JSON object should contain keys that are the file paths of the files you are correcting (e.g., "Controllers/AccountController.cs").

  The values for each key must be the complete, corrected source code for that file.

  Do NOT include files that do not need to be changed in the final JSON response.

  Do NOT include any surrounding text, explanations, or markdown code fences. Your response must start directly with '{{{{' and end with '}}}}'.

  1. Build Errors to Fix:
  {errors}

  2. Original Files with Code:
  {files}

  Now, provide the JSON object containing only the corrected file(s).

generate_model: |
  You are an expert C# developer. Generate the complete C# code for a model class based on the provided JSON definition.
  Derive the class name from the filePath.
  Use the namespace exactly as specified.
  Create a public property for each item in the properties array.
  Use the specified dataType and apply all attributes as data annotations.
  Include using statements for System.ComponentModel.DataAnnotations.
  Output only the raw C# code with no explanations or markdown.
  Input JSON: {context}

generate_controller: |
  You are an expert ASP.NET Core developer. Generate the complete C# code for a controller class based on the provided JSON definition.

  Instructions:
  - Derive the class name from the `filePath`.
  - Inherit the controller class from `Controller`.
  - Use the exact `namespace` specified.
  - Use constructor-based dependency injection for all items in the `dependencies` array.
  - For each method in the `methods` array:
    - Use the provided `name`, `returnType`, `parameters`, and `httpVerb`.
    - Implement the method using the `description` and `rag_context`.

  Input JSON:
  {context}

  Supporting RAG Context (Original VB6 Logic):
  {rag_context}

  Output Requirements:
  - Write full C# code with no placeholder comments.
  - Generate only the raw C# code (no markdown, no explanations).

generate_view: |
  You are an expert Razor and Bootstrap 5 developer. Generate the complete `.cshtml` file for an ASP.NET Core MVC view.

  Instructions:
  - Begin the file with `@model` using the class specified in the `dependencies`.
  - Build a standard Bootstrap 5 HTML form.
  - For each `uiComponent`:
    - Use the `label` for `<label>`.
    - Use the `bindsTo` for the `asp-for` attribute.
    - Render appropriate HTML elements (e.g., `input`, `textarea`, `button`).
    - Use proper Bootstrap form-group and control classes.

  Input JSON:
  {context}

  Output Requirements:
  - Generate only raw Razor (.cshtml) code (no explanations, no markdown).


generate_interface: |
  You are an expert C# developer. Generate a C# interface based on the provided JSON definition.
  Derive the interface name from the filePath (e.g., AuthenticationService.cs becomes IAuthenticationService).
  Use the exact namespace specified.
  Create method signatures for each item in the methods array.
  Output only the raw C# code.
  File Definition: {context}

generate_service: |
  You are an expert C# developer. Generate a C# service class that implements its interface.
  Derive the class name from the filePath.
  Implement the interface listed in the dependencies.
  Use constructor-based dependency injection for all dependencies.
  For each method, provide a full implementation using the description and rag_context for business logic.
  Output only the raw C# code.
  File Definition: {context}
  Supporting RAG Context (Original VB6 Logic): {rag_context}


propose_architecture: |
  You are an expert .NET 8 software architect specializing in migrating legacy VB6 applications to modern Windows Services.
  Your task is to create a DETAILED and COMPLETE project plan for a .NET 8 Worker Service based on the provided analysis of a legacy VB6 application.

  CRITICAL INSTRUCTIONS:
  - Your output MUST be a single, valid JSON object. Do not include any surrounding text or code fences.
  - The project should be structured as a .NET Worker Service.
  - Identify core business logic from `.bas` modules and propose corresponding dependency-injected `Service` classes.
  - For any VB6 forms with `Timer` controls or logic that implies a recurring task, propose a `Worker` class that inherits from `BackgroundService`.
  - The `Worker`'s `ExecuteAsync` method should contain the main loop with a `Task.Delay` to replicate the VB6 timer interval.
  - Map all inferred database tables to `Model` classes.
  - Include all necessary boilerplate files: `.csproj`, `Program.cs`, and `appsettings.json`.

  Analysis Summary to use:
  ```json
  {summary}
  ```

  Follow this exact JSON structure for your response:
  {{{{
  "projectName": "MigratedWindowsService",
  "files": [
  {{{{ "filePath": "MigratedWindowsService.csproj", "type": "csproj" }}}},
  {{{{ "filePath": "Program.cs", "type": "program" }}}},
  {{{{ "filePath": "Models/User.cs", "type": "model", "namespace": "MigratedWindowsService.Models", "properties": [{{{{"name": "Id", "dataType": "int", "attributes": ["Key"]}}}}] }}}},
  {{{{ "filePath": "Services/IAuthenticationService.cs", "type": "interface", "namespace": "MigratedWindowsService.Services", "methods": [{{{{ "name": "ValidateUser", "returnType": "Task<bool>"}}}}] }}}},
  {{{{ "filePath": "PrimaryWorker.cs", "type": "worker", "namespace": "MigratedWindowsService", "dependencies": ["ILogger<PrimaryWorker>", "Services/IAuthenticationService"] }}}}
  ],
  "customizations": {{{{"timerIntervalSeconds": 60}}}}
  }}}}

generate_worker: |
  You are an expert .NET developer. Generate the complete C# code for a Worker Service class that inherits from BackgroundService.
  The class name should be derived from the filePath.
  Use the exact namespace specified.
  Inject all dependencies through the constructor.
  In the ExecuteAsync method, create a while (!stoppingToken.IsCancellationRequested) loop.
  Inside the loop, call the necessary service methods based on the description and rag_context.
  End the loop with await Task.Delay(TimeSpan.FromSeconds(60), stoppingToken);. Use the interval from the project's customizations if available.
  Wrap the core logic in a try-catch block that logs any exceptions.
  Output only the raw C# code.
  File Definition: {context}
  Supporting RAG Context (Original VB6 Logic): {rag_context}