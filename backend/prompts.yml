analyze_vb6: |
  Analyze the following VB6 parsed data: {parsed_data}
  Schema: {schema}
  Dependencies: {dep_graph}
  Generate a JSON summary with file purpose, functionality, dependencies, .NET mappings, controls, events, ADO queries.
  Output only valid JSON without any additional text, code blocks, or explanations. Start directly with '{{{{' and end with '}}}}'.
  Follow this exact structure:
  {{{{
    "files": [
      {{{{
        "file": "example.frm",
        "purpose": "Example purpose description",
        "functionality": "Example functionality description",
        "dependencies": ["dep1.bas", "dep2.cls"],
        "netMappings": {{{{"VB.Form": "Razor View", "VB.TextBox": "Input field"}}}},
        "controls": ["TextBox", "Button"],
        "events": ["Button_Click", "Form_Load"],
        "adoQueries": ["SELECT * FROM example_table"]
      }}}}
    ]
  }}}}

propose_architecture: |
  You are an expert .NET 9 software architect. Based on the provided analysis summary of a legacy VB6 application, propose a detailed and complete target architecture for a modern ASP.NET Core MVC application.

  **CRITICAL INSTRUCTIONS:**
  Your output MUST be a single, valid JSON object that strictly adheres to the specified structure.
  You must provide exhaustive details for each file type:

  1. **For `model` files:** You MUST populate the `properties` array. Infer the property names and data types from the `schema` in the analysis summary. Map VB6/Access data types to C# types (e.g., TEXT -> string, LONG -> int, DATETIME -> DateTime).

  2. **For `controller` files:** You MUST populate the `methods` array. For each VB6 form, create corresponding action methods. A login form needs a GET method to show the page and a POST method to handle the submission. The method names should be descriptive (e.g., `Login`, `ChangePassword`, `ShowProfile`). Infer parameters from the UI controls on the original forms.

  3. **For `view` files:** You MUST populate the `uiComponents` array. Map the `controls` from the VB6 form analysis to modern HTML components. For each `VB.TextBox`, create an "input" component. For each `VB.CommandButton`, create a "button".

  4. **For all files:** You MUST populate the `dependencies` array. For controllers, this should include the services or repositories they use. For services, it should include the DbContext.

  **Analysis Summary to use:**
  ```json
  {summary}
  Output only valid JSON without any additional text, code blocks, or explanations. Start directly with '{{{{' and end with '}}}}'.

  Follow this exact structure:
  {{{{
  "projectName": "RailwayReservationSystem",
  "files": [
  {{{{
  "filePath": "Models/UserModel.cs",
  "type": "model",
  "namespace": "RailwayReservationSystem.Models",
  "dependencies": [],
  "properties": [
  {{{{"name": "Id", "dataType": "int", "attributes": ["Key"]}}}},
  {{{{"name": "Username", "dataType": "string", "attributes": ["Required", "StringLength(50)"]}}}},
  {{{{"name": "Email", "dataType": "string", "attributes": ["EmailAddress"]}}}}
  ]
  }}}},
  {{{{
  "filePath": "Controllers/AccountController.cs",
  "type": "controller",
  "namespace": "RailwayReservationSystem.Controllers",
  "dependencies": ["Services/IAuthenticationService"],
  "methods": [
  {{{{
  "name": "Login",
  "returnType": "IActionResult",
  "parameters": [],
  "httpVerb": "GET",
  "description": "Displays the login page."
  }}}},
  {{{{
  "name": "Login",
  "returnType": "IActionResult",
  "parameters": [ {{{{"dataType": "LoginViewModel", "name": "model"}}}} ],
  "httpVerb": "POST",
  "description": "Handles the user login submission."
  }}}}
  ]
  }}}},
  {{{{
  "filePath": "Views/Account/Login.cshtml",
  "type": "view",
  "namespace": "RailwayReservationSystem.Views.Account",
  "dependencies": ["Models/LoginViewModel"],
  "uiComponents": [
  {{{{"componentType": "input", "label": "Username", "bindsTo": "Username"}}}},
  {{{{"componentType": "input", "label": "Password", "bindsTo": "Password", "attributes": ["type=password"]}}}},
  {{{{"componentType": "button", "label": "Login", "attributes": ["type=submit"]}}}}
  ]
  }}}}
  ],
  "customizations": {{{{
  "authentication": true
  }}}},
  "efCoreContext": "Data/ApplicationDbContext.cs"
  }}}}

infer_schema: |
  Infer MySQL schema from ADO queries: {ado_queries}
  Output only valid JSON without any additional text, code blocks, or explanations. Start directly with '{{{{' and end with '}}}}'.
  Follow this exact structure:
  {{{{
    "tables": [
      {{{{
        "name": "example_table",
        "columns": [
          {{{{"name": "id", "type": "INT"}}}},
          {{{{"name": "name", "type": "VARCHAR(255)"}}}}
        ]
      }}}}
    ]
  }}}}

analyze_vb6_single_file: |
  You are a VB6 to .NET expert. Analyze the following single VB6 file and its context.
  Your output must be a single, valid JSON object, without any surrounding text or code fences.

  Database Schema (for context):
  {schema}

  File Data to Analyze:
  {file_data}

  Based on the file data (especially its source code content), determine its purpose, functionality, and how its components would map to .NET.

  Follow this exact JSON structure for your response:
  {{{{
    "file": "example.frm",
    "purpose": "A concise description of what this form is for.",
    "functionality": "A summary of what the code in this file does.",
    "dependencies": ["dep1.bas", "dep2.cls"],
    "netMappings": {{{{
      "VB.Form": "Razor View", 
      "VB.TextBox": "Input field"
    }}}},
    "controls": ["TextBox", "Button"],
    "events": ["Button_Click", "Form_Load"],
    "adoQueries": ["SELECT * FROM example_table"]
  }}}}

generate_file: |
  You are an expert .NET 9 and C# developer. Your task is to generate the complete code for a single file based on the provided context.

  Instructions:

  Generate only the raw code for the file specified.
  Do NOT include any surrounding text, explanations, or markdown code fences (like csharp ...).

  Pay close attention to the target_file_info to determine the correct namespace, class name, and file type (Controller, Model, View, etc.).

  Use the retrieved_rag_context to understand the original VB6 functionality and purpose, and translate that logic into modern .NET 9 code.

  For Models, create properties that match the database schema found in the context.

  For Controllers, create action methods (e.g., Index, Create, Edit) that correspond to the events and functionality of the original VB6 forms.

  For Views (.cshtml), create Razor syntax with HTML and Bootstrap 5 classes that replicates the UI controls from the original VB6 form.

  Context for Code Generation:
  {context}

refine_code: |
  You are an expert .NET 9 code debugger. You will be given a set of C# and Razor files that failed to build, along with the exact error messages from the compiler.
  Your task is to analyze the errors and the provided code, identify the root causes, and provide the corrected versions of ONLY the files that need to be changed.

  Instructions:

  Analyze the build_errors list carefully. Common errors include missing using statements, incorrect namespaces, type mismatches, or syntax errors.

  Review the files_with_code to find the lines causing the errors.

  Your output MUST be a single, valid JSON object.

  The JSON object should contain keys that are the file paths of the files you are correcting (e.g., "Controllers/AccountController.cs").

  The values for each key must be the complete, corrected source code for that file.

  Do NOT include files that do not need to be changed in the final JSON response.

  Do NOT include any surrounding text, explanations, or markdown code fences. Your response must start directly with '{{{{' and end with '}}}}'.

  1. Build Errors to Fix:
  {errors}

  2. Original Files with Code:
  {files}

  Now, provide the JSON object containing only the corrected file(s).


generate_model: |
  You are an expert C# developer. Generate the complete C# code for a model class based on the provided JSON definition.

  Instructions:
  - Derive the class name from the `filePath`.
  - Use the `namespace` exactly as specified.
  - Create a public property for each item in the `properties` array.
  - Use the specified `dataType`.
  - Apply all specified `attributes` as C# data annotations (e.g., [Key], [Required]).

  Input JSON:
  {context}

  Output Requirements:
  - Generate only raw C# code (no explanations, no markdown fences).
  - Use `System.ComponentModel.DataAnnotations` where applicable.

generate_controller: |
  You are an expert ASP.NET Core developer. Generate the complete C# code for a controller class based on the provided JSON definition.

  Instructions:
  - Derive the class name from the `filePath`.
  - Inherit the controller class from `Controller`.
  - Use the exact `namespace` specified.
  - Use constructor-based dependency injection for all items in the `dependencies` array.
  - For each method in the `methods` array:
    - Use the provided `name`, `returnType`, `parameters`, and `httpVerb`.
    - Implement the method using the `description` and `rag_context`.

  Input JSON:
  {context}

  Supporting RAG Context (Original VB6 Logic):
  {rag_context}

  Output Requirements:
  - Write full C# code with no placeholder comments.
  - Generate only the raw C# code (no markdown, no explanations).

generate_view: |
  You are an expert Razor and Bootstrap 5 developer. Generate the complete `.cshtml` file for an ASP.NET Core MVC view.

  Instructions:
  - Begin the file with `@model` using the class specified in the `dependencies`.
  - Build a standard Bootstrap 5 HTML form.
  - For each `uiComponent`:
    - Use the `label` for `<label>`.
    - Use the `bindsTo` for the `asp-for` attribute.
    - Render appropriate HTML elements (e.g., `input`, `textarea`, `button`).
    - Use proper Bootstrap form-group and control classes.

  Input JSON:
  {context}

  Output Requirements:
  - Generate only raw Razor (.cshtml) code (no explanations, no markdown).
